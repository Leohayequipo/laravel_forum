//instalar laravel
laravel new forum

//instalar 
breeze
composer require laravel/breeze --dev

php artisan breeze:install

//creo las bases
Desde mysql

//migro
php artisan migrate

//instalar componentes

cuando agrego clases tailwind 
necesito correr el 
comando npm run dev

//livewire laivvwaiger
instalar
composer require livewire/livewire

ir a las plantillas view-layouts-app.blade
y meter las directivas

@livewireStyles

@livewireScripts

despues crear componente
php artisan make:livewire show-threads
crea en la vista y en app

un componente se divide en dos la parte de la vista y la parte de la Logica


//crear entidad de categoria
php artisan make:model Category -mf

crea el modelo, factory y migracion
//migrate es la representacion de la tabla
agrego los campos en database-migrations-tabla

//factory  model de datos/datos falsos
factory //datos falsos 

//seeders semillas

desde terminar corro el refresh de tablas y seeders
php artisa migrate:refresh --seed


///**hacer consulta**////
La consulta la hago en el componente del lado de php
livewire-ShowThreads
Pasa eso hay que agregar el manespace de la entidad de Category (hacer un include del modelo catogoria)


//tabla preguntas
creo el modelo el factory y la migracion
 php artisan make:model Thread -
mf


//funcion fecha 
<span>{{$thread->created_at->diffForHumans()}}</span>

//creo las Respuestas
php artisan make:model Reply -mf
modelo 
factory 
migracion
// 
trabajo con la tabla
trabajo con el factory
trabajo con la semillas

//
cuando queremos que importe desde 0
php artisan migrate:fresh --seed

/dise√±o propiedad consulta
nombre propiedad    
<input 
    type="text" 
    placeholder="Buscar" 
    class="bg-slate-800 border-0 rounded-md w-1/3 p-3 text-white/60 text-xs"
    wire:model="Search">
el campo se conecta a una propiedad con este nombre

//Atributo propio del componente- Reaccion ante click
wire:click.prevent="" 

wire:click.prevent="filterByCategory('{{$category->id}}')" .


//livewire
 php artisan make:livewire show-thread
    //crea
    CLASS: app/Livewire/ShowThread.php
VIEW:  resources/views/livewire/show-thread.blade.php

//ruta
Route::get('/thread/{thread}', \App\Livewire\ShowThread::class)
    ->middleware('auth')
    ->name('thread');
//vista
                   name        parametro 
 <a href="{{route('thread',$thread)}}" class="text-xl font-semibold text-white/90 ">
                            {{$thread->title}}
                        </a>
//busqueda implicita 
    En el componente (app-http- )     
    //implicita-esperamos un parametro
    //thread representa la entidad (models-entidad)             
1- ruta
2-vista
3-componente (o html)   

//
                            //metodo para salvar en base a la propiedad
  <form wire:submit.prevent="postReply">
        <input 
            type="text" 
            placeholder="Escribe una respuesta" 
            class="bg-slate-800 border-0 rounded-md w-1/3 p-3 text-white/60 text-xs"
            wire:model.defer="body">
                            propiedad body
            //con esto evitamos que se bloquee el renderizado de la web

    </form>
//entidad son las tablas -
app-models (ahi crear metodos)

//capa de suguridad en el modelo  

protected $fillable = [
        'name',
        'email',
        'password',
    ];
}

//respuestas
php artisan make:livewire show-reply

//componente show-thread
<!-- iterar un component -->
    <!--  nom componente                 key unico para diferenciarlos
        livewire('show-reply',['reply'=>$reply],key('reply-'.$reply->id))
    -->
    @foreach($replies as $reply)
                                                //key unico para diferenciarlos
        @livewire('show-reply',['reply'=>$reply],key('reply-'.$reply->id))

    @endforeach   

//los componentes usan los modelos para acceder a los datos
<?php

namespace App\Livewire;
use App\Models\Reply;
use Livewire\Component;

class ShowReply extends Component
{
    public Reply $reply;
    public function render()
    {
        return view('livewire.show-reply');
    }
}

//los modelos indican las relaciones (belongsTo hasMany)
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Reply extends Model
{
    use HasFactory;
    protected $fillable = [
        'thread_id',
        'body'
    ];
    public function user(){
        return $this->belongsTo(User::class);
    }
}
//una vista usa las variables que el componente le permite
